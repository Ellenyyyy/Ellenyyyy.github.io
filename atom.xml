<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ellenyyyy&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-06T06:24:23.374Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Ellenyyyy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/05/20/%E5%8E%9F%E5%9E%8B/"/>
    <id>http://example.com/2021/05/20/%E5%8E%9F%E5%9E%8B/</id>
    <published>2021-05-20T01:45:12.257Z</published>
    <updated>2021-06-06T06:24:23.374Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>-–</p><p>title: JS重难点之原型</p><p>date: </p><p>tags:javascript</p><p>-–</p><h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><h2 id="什么是原型"><a href="#什么是原型" class="headerlink" title="什么是原型"></a>什么是原型</h2><p>定义了构造函数制造出的对象的公共祖先</p><p>每一个构造函数都有一个prototype属性，这个属性是一个指针，指向一个对象，而这个就是原型。</p><h2 id="为什么会有原型-下面的结论有待考证"><a href="#为什么会有原型-下面的结论有待考证" class="headerlink" title="为什么会有原型(下面的结论有待考证)"></a>为什么会有原型(下面的结论有待考证)</h2><p>js语言是面向对象的一门语言，但是以前创造出对象都无法共享属性和方法，做不到继承，由此就出现了原型，这类似于继承，有了原型之后，那么我们通过构造函数new出的对象，都可以继承自原型</p><h2 id="原型的好处"><a href="#原型的好处" class="headerlink" title="原型的好处"></a>原型的好处</h2><p>1.实现了所有对象都能共享原型上的属性和方法，节省了内存</p><p>2.基于原型，有了原型链，可以实现了继承</p><p>我们想要弄清楚原型这个概念之前，首先我们需要了解几个名词</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>从上面的代码来说，person就是对象。因为是通过构造函数Person new出来的，所以称为对象</p><p>相当于 构造函数是一个生产车间 而对象就是工厂批量生产出来的流水线的东西</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>从上面的代码来说 Person这个函数就是我们所说的构造函数</p><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><p><strong>每一个函数都有一个prototype属性</strong></p><p>那么函数的prototype属性是指向什么的呢？</p><p>其实，函数的 prototype 属性指向了一个对象，</p><p>这个对象正是调用该构造函数而创建的<strong>实例</strong>的原型(原型其实就是一个对象)</p><h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h2><p><strong>每一个对象都有一个prototo属性</strong>(由于typora对-有识别 所以我下面都直接写proto)</p><p>每一个js对象(null除外)在创建的时候就会关联另一个对象，这个对象就是我们所说的原型</p><p>从代码上我们可以得到：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//对象的proto指向的原型 和 对应的构造函数的protype指向的原型 是同一个 </span></span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>所以我们也可以画出下面这个关系图</p><p>![截屏2021-05-20 上午10.09.31](/Users/elenliao/Library/Application Support/typora-user-images/截屏2021-05-20 上午10.09.31.png)我们可以从图上看出，对象和构造函数都可以指向原型，那么我们肯定会思考原型有不有指向对象和构造函数呢？</p><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>指向对象实例没有，因为一个构造函数可以new多个对象，那原型该指向哪个对象呢？所以原型指向对象的实例是没有的。</p><p>但是原型指向构造函数是有的，这就要说到一个构造器属性<strong>constructor</strong>，</p><p><strong>每一个原型都有一个 constructor 属性指向关联的构造函数。</strong></p><p>从代码上我们可以得到</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//原型的constructor指向这个构造函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;对象的原型的constuctor指向创建对象的构造函数&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__.constructor === Person)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;构造函数的原型的constuctor指向创建对象的构造函数&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype === Person) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>所以我们可以更新我们上面的图</p><p>![截屏2021-05-20 上午10.24.26](/Users/elenliao/Library/Application Support/typora-user-images/截屏2021-05-20 上午10.24.26.png)</p><p>那么从上面这个图，我们可以很清晰的看出构造函数、实例对象、原型三者之间的关系了</p><p>那么我们接下来，再深刻学习对象和原型之间还有什么更深沉的关联？</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>每个构造函数可以创建多个实例对象</li><li>每个构造函数都有一个prototype属性，并且这个属性指向原型</li><li>每个对象都有一个proto属性，并且这个属性指向原型</li><li>每个原型都有一个constructor属性，并且这个属性指向构造函数</li><li>原型链可以说是通过proto这个桥梁来链接起来</li></ol><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><ol><li>原型链也就是通过proto这个桥梁连通的一条链子。</li><li>创建出的实例对象一层一层继承原型，当访问对象上属性和方法就会顺着原型链，一直到原型链顶端去查找。</li><li>所有原型链的顶端都是Object，再往上就是null</li></ol><h1 id="与原型相关的方法"><a href="#与原型相关的方法" class="headerlink" title="与原型相关的方法"></a>与原型相关的方法</h1><table><thead><tr><th></th><th align="left">使用方法</th><th>作用 返回布尔值</th></tr></thead><tbody><tr><td>instanceof</td><td align="left">person instanceOf Person</td><td>可以确定实例对象原型链上的构造函数的原型</td></tr><tr><td>setPrototypeOf</td><td align="left">Object.setPrototype(person, biped)</td><td>设置实例对象的原型 一般不使用</td></tr><tr><td>Object.creat()</td><td align="left">let person = Object.creat(biped)</td><td>创建新对象 并指定原型 一般使用这个 而不使用上面那个</td></tr><tr><td>Object.getPrototypeOf()</td><td align="left">Object.getPrototypeOf(person) ===Person</td><td>获取对象原型</td></tr><tr><td>hasOwnProperty()</td><td align="left">person.hasOwnProperty(‘name’)</td><td>判断某个属性是在实例上还是在原型上</td></tr><tr><td>isPrototypeOf()</td><td align="left">Person.isPrototype(person)</td><td>判断一个对象是否存在于另一个对象的原型链上</td></tr></tbody></table><p>🌰例题</p><p>1</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.1</span></span><br><span class="line">Person.prototype.name = <span class="string">&#x27;sunny&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype.name = <span class="string">&#x27;cherry&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//cherry</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2</span></span><br><span class="line">Person.prototype.name = <span class="string">&#x27;sunny&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&#x27;cherry&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//cherry</span></span><br></pre></td></tr></table></figure><p>2</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.1</span></span><br><span class="line">Person.prototype.name = <span class="string">&#x27;sunny&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: <span class="string">&#x27;cherry&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//sunny</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2</span></span><br><span class="line">Person.prototype.name = <span class="string">&#x27;sunny&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//var this = &#123;</span></span><br><span class="line">    <span class="comment">//__proto__: Person.prototype</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: <span class="string">&#x27;cherry&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//cherry</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>My new Post</title>
    <link href="http://example.com/2021/04/22/My-new-Post/"/>
    <id>http://example.com/2021/04/22/My-new-Post/</id>
    <published>2021-04-22T05:32:39.000Z</published>
    <updated>2021-04-22T05:57:33.734Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="看看到底能不能行"><a href="#看看到底能不能行" class="headerlink" title="看看到底能不能行"></a>看看到底能不能行</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/04/22/hello-world/"/>
    <id>http://example.com/2021/04/22/hello-world/</id>
    <published>2021-04-22T02:30:23.819Z</published>
    <updated>2021-04-22T02:30:23.819Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
